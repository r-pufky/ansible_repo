---
###############################################################################
# Repo Prep
###############################################################################
# Prep environment for release download management. Access tokens must have
# 'contents:read' permissions.
#
# Methodology:
# * Generate query URL based on testing, static URL, or standard release.
# * Query URL if API or static; standardize results.
# * Inject testing data if enabled.
# * Parse metadata for asset values.
# * Cleanup existing files if existing.
# * Set changed flag.
#
# Generates:
#   __repo_auth_header: str - API token auth header.
#   __repo_release_url: str - API 'releases' URL path.
#   __repo_host_base: str - API base URL.
#   __repo_staging_dir: str - Staging location for downloads, extracts.
#   __repo_release_path: str - API 'tags' URL path.
#   __repo_extract_dir: str - Extract location for downloads, extracts.
#   __repo_asset_stat: stat - asset location.
#   __repo_checksum_stat: stat - checksum location (when defined).
#   __repo_signature_stat: stat - signature location (when defined).
#   __repo_staging_stat: stat - for existing staging location.
#   __repo_extract_stat: stat - for existing extract location.
#
# Exports:
#   _repo_asset: dict - Asset metadata.
#   _repo_changed: bool - True if new asset extracted/installed.
#   _repo_checksum: dict - Checksum metadata.
#   _repo_signature: dict - Signature metadata.
#   _repo_remote_metadata: dict - Release metadata for requested version.
#   _repo_dir: str - Versioned repository extract location.
#   _repo_tag: str - Detected tag version.
#
# Reference:
# * https://docs.github.com/en/rest/releases

- name: 'Prep | sanitize paths'
  ansible.builtin.set_fact:
    __repo_release_url: '{{
        repo_role_host[repo_host | default("github") | lower].api
      }}/{{ repo_release_owner }}/{{ repo_release_repo }}/releases'
    __repo_host_base:
      '{{ repo_role_host[repo_host | default("github") | lower].base }}'
    __repo_staging_dir: "{{ repo_staging_dir | regex_replace('\\/$', '') }}"
    __repo_release_path:
      '/{{ "tags/" if repo_release_tag != "latest" }}{{ repo_release_tag }}'
    __repo_extract_dir: "{{ repo_extract_dir | regex_replace('\\/$', '') }}"

# Variables used in header keys do not resolve correctly. Register will
# overwrite variable with conditional results (e.g. github query success then
# codeberg skipped, register overwrites the query results). Instead, just send
# both authentication headers.
- name: 'Prep | query release metadata'
  when: >
    not (repo_testing_enable | default(false)) and
    repo_release_asset_static_url | length == 0
  ansible.builtin.uri:
    url: '{{ __repo_release_url }}{{
        ""
        if repo_release_pre_enable else
        __repo_release_path
      }}'
    return_content: true
    headers:
      'Authorization': '{{ repo_host_access_token | default(omit) }}'
      'AuthorizationHeaderToken':
        '{{ repo_host_access_token | default(omit) }}'
  register: _repo_remote_metadata

- name: 'Prep | sanitize release metadata'
  when: not (repo_testing_enable | default(false))
  ansible.builtin.set_fact:
    _repo_remote_metadata: '{{
        _repo_remote_metadata.json[0]
        if repo_release_pre_enable else _repo_remote_metadata.json
      }}'

- name: 'Prep | get static release metadata'
  when: repo_release_asset_static_url | length > 0
  ansible.builtin.set_fact:
    _repo_remote_metadata: {
      "tag_name": "{{ now(utc=true, fmt='%Y-%m-%d') }}",
      "assets": [
        {
          "name": "{{ repo_release_asset }}",
          "browser_download_url": "{{ repo_release_asset_static_url }}",
        }
      ]
    }

# Inject response data to _repo_remote_metadata for testing.
- name: 'Prep | testing'
  when: (repo_testing_enable | default(false))
  block:
    - name: 'Prep | testing | cache data'
      ansible.builtin.set_fact:
        __repo_cache_test_index: '{{
            0
            if not __repo_cache_test_index is defined else
            __repo_cache_test_index | int + 1
          }}'

    - name: 'Prep | testing | parse testing metadata'
      ansible.builtin.set_fact:
        __repo_cache_asset: '{{
            repo_testing_versions[__repo_cache_test_index | int].asset |
            basename
          }}'
        __repo_cache_checksum: '{{
            repo_testing_versions[__repo_cache_test_index | int].checksum |
            default("") | basename
          }}'
        __repo_cache_signature: '{{
            repo_testing_versions[__repo_cache_test_index | int].signature |
            default("") | basename
          }}'

    - name: 'Prep | testing | inject metadata'
      ansible.builtin.set_fact:
        _repo_remote_metadata: {
          "tag_name": "{{
              repo_testing_versions[__repo_cache_test_index | int].version
            }}",
          "assets": [
            {
              "name": "{{ __repo_cache_asset }}",
              "browser_download_url": "http://example.com/test",
            },
            {
              "name": "{{
                  __repo_cache_checksum
                  if repo_release_checksum | length > 0 else
                  __repo_cache_asset ~ '.sha256'
                }}",
              "browser_download_url": "http://example.com/test.sha256",
            },
            {
              "name": "{{
                  __repo_cache_signature
                  if repo_release_signature | length > 0 else
                  __repo_cache_asset ~ '.asc'
                }}",
              "browser_download_url": "http://example.com/test.asc",
            },
          ],
          "tarball_url": "http://example.com/test",
          "zipball_url": "http://example.com/test",
        }

- name: 'Prep | parse release tags'
  ansible.builtin.set_fact:
    _repo_tag: '{{ _repo_remote_metadata.tag_name }}'
    __repo_tag_bare: '{{
        _repo_remote_metadata.tag_name
        if repo_release_specifier == "" else
        _repo_remote_metadata.tag_name.split(repo_release_specifier)[1:] |
            join(repo_release_specifier)
      }}'
    __repo_asset_dict: '{{
        dict(_repo_remote_metadata.assets |
             map(attribute="name") |
             zip(_repo_remote_metadata.assets))
      }}'

- name: 'Prep | latest → {{ _repo_tag }}'
  when: repo_release_tag == 'latest'
  ansible.builtin.debug:
    msg: |
      ╭───────────────────────────────────────────────────────────────────╮
      │                                                                   │
      │                     Detected latest version.                      │
      │                                                                   │
      ├───────────────────────────────────────────────────────────────────╯
      │ {{ _repo_tag }}

- name: 'Prep | parse templates'
  ansible.builtin.set_fact:
    __repo_release_asset: '{{
        repo_release_asset | regex_replace("{VERSION}", _repo_tag) |
        regex_replace("{BARE_VERSION}", __repo_tag_bare)
      }}'
    __repo_release_checksum: '{{
        repo_release_checksum | regex_replace("{VERSION}", _repo_tag) |
        regex_replace("{BARE_VERSION}", __repo_tag_bare)
      }}'
    __repo_release_signature: '{{
        repo_release_signature | regex_replace("{VERSION}", _repo_tag) |
        regex_replace("{BARE_VERSION}", __repo_tag_bare)
      }}'
    _repo_dir:
      '{{ __repo_extract_dir }}/{{ repo_release_repo }}-{{ _repo_tag }}'

# For releases with no asset artifacts (source only), inject same structure
# template into API results for static tar/zip URL's; enabling source code
# downloads with no changes for download steps.
- name: 'Prep | parse source releases'
  ansible.builtin.set_fact:
    __repo_source_dict: {
      "name": "{{ __repo_release_asset }}",
      "browser_download_url": "{{
        _repo_remote_metadata.zipball_url
        if '.zip' in __repo_release_asset else
        _repo_remote_metadata.tarball_url
      }}",
    }

- name: 'Prep | check returned assets'
  when: >
    not repo_release_download_source_enable and
    __repo_release_asset not in __repo_asset_dict
  ansible.builtin.fail:
    msg: |
      ╭───────────────────────────────────────────────────────────────────╮
      │                                                                   │
      │     repo_release_asset was not found in returned asset list.      │
      │                                                                   │
      ├───────────────────────────────────────────────────────────────────╯
      │ Usually this happens when only source is release and no binary
      │ packages.
      │
      │ Download source with repo_release_download_source_enable=true.
      │
      │ repo_release_asset: {{ __repo_release_asset }}
      │ assets returned: {{ __repo_asset_dict }}

- name: 'Prep | parse asset metadata'
  ansible.builtin.set_fact:
    _repo_asset: '{{
        __repo_asset_dict[__repo_release_asset]
        if not repo_release_download_source_enable else
        __repo_source_dict
      }}'
    _repo_checksum:
      '{{  __repo_asset_dict[__repo_release_checksum] | default({}) }}'
    _repo_signature:
      '{{ __repo_asset_dict[__repo_release_signature] | default({}) }}'

- name: 'Prep | force overwrite enabled'
  when: repo_force_overwrite
  block:
    - name: 'Prep | remove cached asset'
      ansible.builtin.file:
        path: '{{ __repo_staging_dir }}/{{ _repo_asset.name }}'
        state: 'absent'

    - name: 'Prep | remove cached checksum'
      when: _repo_checksum | length > 0
      ansible.builtin.file:
        path: '{{ __repo_staging_dir }}/{{ _repo_checksum.name }}'
        state: 'absent'

    - name: 'Prep | remove cached signature'
      when: _repo_signature | length > 0
      ansible.builtin.file:
        path: '{{ __repo_staging_dir }}/{{ _repo_signature.name }}'
        state: 'absent'

    - name: 'Prep | remove cached release'
      ansible.builtin.file:
        path: '{{ _repo_dir }}'
        state: 'absent'

- name: 'Prep | check asset location'
  ansible.builtin.stat:
    path: '{{ __repo_staging_dir }}/{{ _repo_asset.name }}'
  register: __repo_asset_stat

# If not set, use an invalid location for existence checks.
- name: 'Prep | check checksum location'
  when: _repo_checksum | length > 0
  ansible.builtin.stat:
    path: '{{ __repo_staging_dir }}/{{ _repo_checksum.name }}'
  register: __repo_checksum_stat

# If not set, use an invalid location for existence checks.
- name: 'Prep | check signature location'
  when: _repo_signature | length > 0
  ansible.builtin.stat:
    path: '{{ __repo_staging_dir }}/{{ _repo_signature.name }}'
  register: __repo_signature_stat

- name: 'Prep | check staging directory'
  ansible.builtin.stat:
    path: '{{ __repo_staging_dir }}'
  register: __repo_staging_stat

- name: 'Prep | check extract directory'
  ansible.builtin.stat:
    path: '{{ _repo_dir }}'
  register: __repo_extract_stat

- name: 'Prep | set change state'
  ansible.builtin.set_fact:
    _repo_changed: '{{ not __repo_extract_stat.stat.exists }}'
