---
# yamllint disable rule:line-length
###############################################################################
# Unpack Github Archive
###############################################################################
# Create versioned directory and unpack or copy asset.
#
# Args:
#   _repo_asset: dict - asset metadata.
#   _repo_dir: str - versioned repository extract location.
#   __repo_extract_stat: stat - for existing extract location.
#   __repo_extract_dir: str - Extract location for downloads, extracts.
#   _repo_tag: str - Full version (vx.x.x) to install.

- name: 'Extract | create extract directory'
  when: not __repo_extract_stat.stat.exists
  ansible.builtin.file:
    path: '{{ _repo_dir }}'
    owner: '{{ repo_file_owner }}'
    group: '{{ repo_file_group }}'
    mode: '{{ repo_extract_mode }}'
    state: 'directory'

- name: 'Extract | unpack archive'
  when: >
    not __repo_extract_stat.stat.exists and
    ('.tar.' in _repo_asset.name or
     '.zip' in _repo_asset.name)
  ansible.builtin.unarchive:
    src: '{{ __repo_staging_dir }}/{{ _repo_asset.name }}'
    remote_src: true
    dest: '{{ _repo_dir }}'
    owner: '{{ repo_file_owner | default("root", true) }}'
    group: '{{ repo_file_group | default("root", true) }}'
    mode: '{{ repo_extract_mode | default("0644", true) }}'
    extra_opts: '{{ repo_extract_extra_opts | default(omit, true) }}'

- name: 'Extract | copy non-archive'
  when: >
    not __repo_extract_stat.stat.exists and
    '.tar.' not in _repo_asset.name and
    '.zip' not in _repo_asset.name
  ansible.builtin.copy:
    src: '{{ __repo_staging_dir }}/{{ _repo_asset.name }}'
    remote_src: true
    dest: '{{ _repo_dir }}/{{ _repo_asset.name }}'
    owner: '{{ repo_file_owner | default("root", true) }}'
    group: '{{ repo_file_group | default("root", true) }}'
    mode: '{{ repo_extract_mode | default("0644", true) }}'

- name: 'Extract | remove files'
  when: >
    not __repo_extract_stat.stat.exists and
    repo_extract_remove_files | length > 0
  ansible.builtin.file:
    path: '{{ _repo_dir }}/{{ item }}'
    state: 'absent'
  loop: '{{ repo_extract_remove_files }}'

- name: 'Extract | check for existing symlink'
  ansible.builtin.stat:
    path: '{{ repo_extract_symlink_target }}'
  check_mode: true
  register: __repo_symlink_stat

# Migrate files before removing symlink to old version.
- name: 'Extract | migrate'
  when: >
    __repo_symlink_stat.stat.exists and
    repo_extract_migrate_files | length > 0
  ansible.builtin.include_tasks: 'migrate.yml'
  loop: '{{ repo_extract_migrate_files }}'

- name: 'Extract | symlink {{ _repo_dir }} to {{ repo_extract_symlink_target }}'  # noqa name[template] provide full symlink info
  when: repo_extract_symlink_target
  ansible.builtin.file:
    src: '{{ _repo_dir }}'
    dest: '{{ repo_extract_symlink_target }}'
    owner: '{{ repo_file_owner }}'
    group: '{{ repo_file_group }}'
    force: true
    state: 'link'

- name: 'Extract | remove old versions'
  when: repo_extract_delete_old_versions
  block:
    - name: 'Extract | find existing extracted archives'
      ansible.builtin.find:
        paths: '{{ __repo_extract_dir }}'
        file_type: 'directory'
        use_regex: true
        patterns:
          - '.*{{ repo_release_repo }}-.*'
        recurse: false
      register: __repo_install_stat

    - name: 'Extract | delete old versions'
      when: _repo_tag != item.path | basename | regex_replace(repo_release_repo ~ '-', '')
      ansible.builtin.file:
        path: '{{ item.path }}'
        state: 'absent'
      loop: '{{ __repo_install_stat.files }}'
      loop_control:
        label: '{{ item.path }}'

- name: 'Extract | cleanup staging archive'
  when: repo_staging_clean
  ansible.builtin.file:
    path: '{{ __repo_staging_dir }}/{{ _repo_asset.name }}'
    state: 'absent'
